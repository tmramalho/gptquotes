{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quote","props","className","value","Header","i","state","quote","bgcolor","fgcolor","quote_files","push","String","fromCharCode","r","Math","floor","random","length","$","ajax","url","done","data","receiveData","lines","split","this","setState","resetQuote","colorDesc","obj","keys","Object","randomProperty","Colors","headerStyle","backgroundColor","color","style","onClick","href","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w6IAAAA,EAAOC,QAAU,IAA0B,kC,0KCW3C,SAASC,EAAMC,GACb,OACE,uBAAGC,UAAU,iBACVD,EAAME,O,IAKPC,E,YACJ,WAAYH,GAAQ,IAAD,EAObI,EAPa,qBACjB,4CAAMJ,KACDK,MAAQ,CACXC,MAAO,GACPC,QAAS,GACTC,QAAS,IAGX,IAAIC,EAAc,GAClB,IAAKL,EAAI,GAAIA,EAAI,IAAKA,IACpBK,EAAYC,KAAK,gBAAkBC,OAAOC,aAAaR,IAEzD,IAAIS,EAAIC,KAAKC,MAAMD,KAAKE,SAAWP,EAAYQ,QAZ9B,OAajBC,IAAEC,KAAK,CACLC,IAAKX,EAAYI,KAElBQ,MAAK,SAACC,GAAD,OAAU,EAAKC,YAAYD,MAhBhB,E,yEAmBPA,GACV,IAAIE,EAAQF,EAAKG,MAAM,SACvBC,KAAKC,SAAS,CACZH,MAAOA,IAETE,KAAKE,e,mCAIL,IAAIf,EAAIC,KAAKC,MAAMD,KAAKE,SAAWU,KAAKrB,MAAMmB,MAAMP,QAChDY,EA3Ca,SAAUC,GAC3B,IAAIC,EAAOC,OAAOD,KAAKD,GACvB,OAAOA,EAAIC,EAAMA,EAAKd,OAASH,KAAKE,UAAY,IAyChCiB,CAAeC,GAC/BR,KAAKC,SAAS,CACZrB,MAAOoB,KAAKrB,MAAMmB,MAAMX,GACxBL,QAASqB,EAAU,IACnBtB,QAASsB,EAAU,S,+BAIb,IAAD,OACHM,EAAc,CAChBC,gBAAiBV,KAAKrB,MAAME,QAC5B8B,MAAOX,KAAKrB,MAAMG,SAEpB,OACE,4BAAQ8B,MAAOH,EAAalC,UAAU,aAAasC,QAAS,kBAAM,EAAKX,eACrE,kBAAC7B,EAAD,CAAOG,MAAOwB,KAAKrB,MAAMC,QACzB,yBAAKL,UAAU,mBAAf,mKAIsB,uBAAGuC,KAAK,mCAAR,gBAJtB,eAKY,uBAAGA,KAAK,iCAAR,cALZ,U,GA9CaC,IAAMC,WAkEZC,MARf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,QCpEc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82db05ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport $ from 'jquery';\nimport logo from './logo.svg';\nimport './App.css';\nimport Colors from './colors.json';\n\nvar randomProperty = function (obj) {\n    var keys = Object.keys(obj)\n    return obj[keys[ keys.length * Math.random() << 0]];\n};\n\nfunction Quote(props) {\n  return (\n    <p className=\"quote-content\">\n      {props.value}\n    </p>\n  );\n}\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: \"\",\n      bgcolor: \"\",\n      fgcolor: \"\",\n    };\n    var i;\n    var quote_files = [];\n    for (i = 97; i < 108; i++) {\n      quote_files.push(\"data/quotes1a\" + String.fromCharCode(i));\n    }\n    var r = Math.floor(Math.random() * quote_files.length);\n    $.ajax({\n      url: quote_files[r],\n    })\n    .done((data) => this.receiveData(data));\n  }\n\n  receiveData(data) {\n    var lines = data.split(/\\r?\\n/);\n    this.setState({\n      lines: lines\n    });\n    this.resetQuote();\n  }\n\n  resetQuote() {\n    var r = Math.floor(Math.random() * this.state.lines.length);\n    var colorDesc = randomProperty(Colors);\n    this.setState({\n      quote: this.state.lines[r],\n      fgcolor: colorDesc[\"50\"],\n      bgcolor: colorDesc[\"800\"],\n    });\n  }\n\n  render() {\n    var headerStyle = {\n      backgroundColor: this.state.bgcolor,\n      color: this.state.fgcolor,\n    }\n    return (\n      <header style={headerStyle} className=\"App-header\" onClick={() => this.resetQuote()}>\n        <Quote value={this.state.quote} />\n        <div className='bottom-sentence'>\n          Click anywhere for the next sentence.\n          These inspirational quotes are generated by GPT-2 trained on motivational\n          material from the internet.\n          Thanks to code from <a href='https://twitter.com/huggingface'>@huggingface</a>.\n          Questions <a href='https://twitter.com/tmramalho'>@tmramalho</a>.\n        </div>\n      </header>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}